最大流的性质：1.容量限制2.斜对称性（f(u,v) = -f(v, u))3.流量平衡

增广路算法
适用于有向边 起点终点已知
struct Edge{
    int from, to, cap, flow;
    Edge(int u, int v, int c, int f){
        from = u;
        to = v;
        cap = c;
        flow = f;
    }
};
int n, m,k;
vector<Edge> edges;
vector<int> G[maxn];//G[i][j]表示结点i的第j条边在e数组的序号
int a[maxn];//起点到i的可改进量
int p[maxn];//最短路树上p的入弧编号

void init(int n)
{
    for(int i = 0; i < n;i++){
        G[i].clear();
    }
    edges.clear();
}

void AddEdge(int from, int to, int cap)
{
    edges.push_back(Edge(from, to, cap, 0));
    edges.push_back(Edge(to, from, 0, 0));//反向弧
    m = edges.size();
    G[from].push_back(m - 2);
    G[to].push_back(m - 1);
}

int MaxFlow(int s, int t)
{
    int flow = 0;
    while(1){
        memset(a, 0,sizeof(a));
        queue<int> Q;
        Q.push(s);
        a[s] = inf;
        while(!Q.empty()){
            int x = Q.front();
            Q.pop();
            for(int i = 0; i < G[x].size(); i++){
                Edge& e = edges[G[x][i]];
                if(!a[e.to] && e.cap > e.flow){
                    p[e.to] = G[x][i];
                    a[e.to] = min(a[x], e.cap - e.flow);
                    Q.push(e.to);
                }
            }
            if(a[t]) break;
        }
        if(!a[t]) break;
        for(int u = t; u != s; u = edges[p[u]].from){
            edges[p[u]].flow += a[t];
            edges[p[u] ^ 1].flow -= a[t];
        }
        flow += a[t];
    }
    return flow;
}
